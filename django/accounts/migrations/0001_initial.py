# Generated by Django 4.1 on 2024-07-22 06:20

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SteamProfile',
            fields=[
                ('steamid', models.CharField(max_length=30, primary_key=True, serialize=False, verbose_name='Steam ID')),
                ('name', models.CharField(db_index=True, max_length=30)),
                ('avatar_s', models.CharField(max_length=100, verbose_name='Avatar small')),
                ('avatar_m', models.CharField(max_length=100, verbose_name='Avatar medium')),
                ('avatar_l', models.CharField(max_length=100, verbose_name='Avatar large')),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('steam_profile', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, primary_key=True, related_name='account', serialize=False, to='accounts.steamprofile')),
                ('steam_auth', models.CharField(max_length=30, verbose_name='Match History Authentication Code')),
                ('email_address', models.EmailField(max_length=200, unique=True)),
                ('discord_name', models.CharField(blank=True, max_length=30)),
                ('last_sharecode', models.CharField(blank=True, max_length=50)),
                ('clean_name', models.CharField(blank=True, max_length=30, validators=[django.core.validators.RegexValidator('^[0-9a-zA-Z.-_][0-9a-zA-Z.-_ ]+[0-9a-zA-Z.-_]+$')])),
                ('enabled', models.BooleanField(default=True, help_text='Designates whether updates for this user are fetched from the Steam API (turned off if the API refuses a sharecode).')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Squad',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('discord_channel_id', models.CharField(blank=True, max_length=50, unique=True, verbose_name='Discord Channel ID')),
                ('members', models.ManyToManyField(related_name='squads', to='accounts.steamprofile')),
            ],
        ),
        migrations.CreateModel(
            name='Invitation',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('discord_name', models.CharField(blank=True, max_length=30)),
                ('squad', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='invitations', to='accounts.squad')),
                ('steam_profile', models.OneToOneField(on_delete=django.db.models.deletion.PROTECT, to='accounts.steamprofile')),
            ],
        ),
        migrations.AddConstraint(
            model_name='invitation',
            constraint=models.UniqueConstraint(fields=('steam_profile', 'squad'), name='unique_steam_profile_squad'),
        ),
        migrations.AddField(
            model_name='account',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='account',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
